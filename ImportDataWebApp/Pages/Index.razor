@page "/"
@using System.IO
@inject IWebHostEnvironment env

<h1 class="mb-4">Blazor Server File Upload</h1>

<div class="@AlertClass" role="alert">
    @AlertMessage
</div>

<div class="progress mb-3" style="height: 20px;">
    <div class="progress-bar" role="progressbar" style="width: @ProgressPercentage%;" aria-valuenow="@ProgressPercentage" aria-valuemin="0" aria-valuemax="100">@ProgressPercentage% Complete</div>
</div>

<form @onsubmit="OnSubmit" class="needs-validation" novalidate>
    <div class="input-group mb-3">
        <InputFile @key=@(inputFileId) class="form-control" id="inputFile" OnChange="OnInputFileChange" aria-describedby="uploadButton" required />
        <button class="btn btn-primary" type="submit" id="uploadButton" disabled="@IsUploadDisabled">
            <span class="oi oi-cloud-upload" aria-hidden="true"></span> Upload Selected File
        </button>
    </div>
    <div class="invalid-feedback">
        Please select a file to upload.
    </div>
</form>

@code {
    MarkupString AlertMessage = new MarkupString("<strong>No file selected</strong>");
    string AlertClass = "alert alert-info";
    int ProgressPercentage = 0;
    IBrowserFile selectedFile;
    long maxFileSize = 1024L * 1024L * 1024L * 2L;
    string[] allowedExtensions = { ".csv", ".xlsx" };
    bool IsUploadDisabled = true;
    private Guid inputFileId = Guid.NewGuid();

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.GetMultipleFiles()[0];
        ProgressPercentage = 0;
        IsUploadDisabled = true;

        if (selectedFile.Size > maxFileSize)
        {
            SetAlert("alert alert-danger", "oi oi-ban", $"File size exceeds the limit. Maximum allowed size is <strong>{maxFileSize / (1024 * 1024)} MB</strong>.");
            return;
        }

        if (!allowedExtensions.Contains(Path.GetExtension(selectedFile.Name).ToLowerInvariant()))
        {
            SetAlert("alert alert-danger", "oi oi-warning", $"Invalid file type. Allowed file types are <strong>{string.Join(", ", allowedExtensions)}</strong>.");
            return;
        }

        SetAlert("alert alert-info", "oi oi-info", $"<strong>{selectedFile.Name}</strong> ({selectedFile.Size} bytes) file selected.");
        IsUploadDisabled = false;
    }

    private async void OnSubmit()
    {
        if (selectedFile != null)
        {
            IsUploadDisabled = true;
            Stream stream = selectedFile.OpenReadStream(maxFileSize);
            string selectedFileName = selectedFile.Name;

            // Read the file content into a byte array
            byte[] fileContent;
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                fileContent = memoryStream.ToArray();
            }

            // Create a new MemoryStream from the byte array
            using (var contentStream = new MemoryStream(fileContent))
            {
                _importService.ProcessExcelFile(contentStream); // Pass the MemoryStream
            }

            SetAlert("alert alert-success", "oi oi-check", $"<strong>{selectedFile.Name}</strong> ({selectedFile.Size} bytes) file uploaded and processed.");
            inputFileId = Guid.NewGuid();
            this.StateHasChanged();
        }
    }


    private void SetAlert(string alertClass, string iconClass, string message)
    {
        AlertClass = alertClass;
        AlertMessage = new MarkupString($"<span class='{iconClass}' aria-hidden='true'></span> {message}");
    }
}